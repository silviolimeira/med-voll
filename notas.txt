
Environment Variable:

MED_VOL_SECRET=




Deletando as migrações:
  delete from flyway_schema_history where success = 0;

Deletando e recriando o banco de dados:
  drop database vollmed_api;
  create database vollmed_api;


02. Requisições POST

. Mapear requisições POST em uma classe Controller;

. Enviar requisições POST para a API utilizando o Postman;

. Enviar dados para API no formato JSON;

. Utilizar a anotação @RequestBody para receber 
  os dados do corpo da requisição em um parâmetro 
  no Controller;

. Utilizar o padrão DTO (Data Transfer Object), 
  via Java Records, para representar os dados
  recebidos em uma requisição POST.
  

03. Spring Data JPA

  . Adicionar novas dependências no projeto
  . Mapear uma entidade JPA e criar uma
    interface Repostiory para ela;
  . Utilizar o Flyway como ferramenta de
    Migrations do projeto;
  . Realizar validações com Bean Validation
    utilizando algumas de suas anotações, como a
    @NotBlank
    
04. Requisições GET

  . Utilizar a anotação @GetMapping para mapear
    métodos em Controllers que produzem dados;
  . Utilizar a interface Pageable do Spring para
    realizar consultas com paginação;
  . Controlar a paginação e ordenação dos dados
    devolvidos pela API com os parâmetros page,
    size e sort;
  . Configurar o projeto para que os comandos 
    SQL sejam exibidos no console.
    
05. Requisições PUT e DELETE

 . Mapear requisições PUT com a anotação
   @PutMapping;
 . Escrever um código para atualizar informações
   de um registro no banco de dados;
 . Mapear requisições DELETE com a anotação
   @DeleteMapping;
 . Mapear parâmetros dinâmicos em URL com a 
   anotação @PathVariable;
 . Implementar o conceito de exclusão lógica com
   o uso de um atributo booleano;
   
Curso 2   
   
01. Boas práticas na API
 
 . Utilizar a classe Response Entity, do Spring,
   para personalizar os retornos dos métodos de
   uma classe Controller;
 
 . Modificar o código HTTP desenvolvido nas
   respostas da API;
   
 . Adicionar cabeçalhos nas respostas da API;
 
 . Utilizar os códigos HTTP apropriados para
   cada operação realizada na API.
   
     
02. Lidando com erros

 . Criar uma classe para isolar o tratamento de
   exceptions da API, com a utilização da anotação
   @RestControllerAdvice;
   
 . Utilizar a anotação @ExceptionHander, do
   Spring, para indicar qual exception um
   determinado método da classe de tratamento de
   erros deve capturar;
   
 . Tratar erros do tipo 404 (Not Found) na classe de
   tratamento de erros;
   
 . Tratar erros do tipo 400 (Bad Request), para
   erros de validação do Bean Validation, na classe
   de tratamento de erros;
 
 . Simplificar o JSON devolvido pela API em casos
   de erro de validação do Bean Validation
   
  
Spring - Objetivos
. Autenticação
. Autorização (controle de acesso)
. Proteção contra ataques (CSRF, clickjaking, etc.)


03. Spring Security

 . Funcionamento do processo de autenticação e
   autorização em uma API Rest;
   
 . Adicionar o Spring Security ao projeto;
 
 . Funciona o comportamento padrão do Spring
   Security em uma aplicação
   
 . Implementar o processo de autenticação na
   API, de maineira Stateless, utilizando as classes e
   configurações do Spring Security.
   
   


       

